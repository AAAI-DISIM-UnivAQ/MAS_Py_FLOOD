:- dynamic new_color/1, pre_alert_weather/0, flood_issue/0.

flood_alertE :> assert(flood_issue),
               write('Pre-alert from Perceptor agent: critical flooding condition!'), nl.


danger_level(green, low).
danger_level(yellow, moderate).
danger_level(orange, high).
danger_level(red, severe).

danger(Level) :- new_color(Color), danger_level(Color, Level).


redisE(Msg) :> write('segnale: '), write(Msg), nl,
              assert(new_color(Msg)).

weather_issue :- danger(Level),
              (Level \= low),
              (Level \= moderate).

alert_weather :- weather_issue, retract(new_color(_)).
alert_weatherI :> assert(pre_alert_weather),
                  write('Pre-alert from Weather agent: critical weather condition!'), nl.


no_issue :- \+weather_issue, retract(new_color(_)).
no_issueI :> write('Not critical weather condition!'), nl.

criticalIssue :- pre_alert_weather, flood_issue,
                 retract(pre_alert_weather),
                 retract(flood_issue).

criticalIssueI :> write('Alert authorities, both the agents communicated critical weather conditions!'), nl.
